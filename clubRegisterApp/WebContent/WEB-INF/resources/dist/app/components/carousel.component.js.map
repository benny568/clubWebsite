{"version":3,"sources":["components/carousel.component.ts"],"names":[],"mappings":"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","file":"components/carousel.component.js","sourcesContent":["import {Component, OnDestroy, Input} from '@angular/core';\nimport {NgFor} from '@angular/common';\nimport {Slide} from './slide.component';\n\nexport enum Direction {UNKNOWN, NEXT, PREV}\n\n@Component({\n    selector: 'carousel',\n    template: `\n    <div (mouseenter)=\"pause()\" (mouseleave)=\"play()\" class=\"carousel slide\">\n      <ol class=\"carousel-indicators\" [hidden]=\"slides.length <= 1\">\n         <li *ngFor=\"let slidez of slides\" [class.active]=\"slidez.active === true\" (click)=\"select(slidez)\"></li>\n      </ol>\n      <div class=\"carousel-inner\"><ng-content></ng-content></div>\n                  <a class=\"left carousel-control\" (click)=\"prev()\" [hidden]=\"!slides.length\">\n                  <span class=\"glyphicon glyphicon-chevron-left\"></span>\n                  </a>\n                  <a class=\"right carousel-control\" (click)=\"next()\" [hidden]=\"!slides.length\">\n                  <span class=\"glyphicon glyphicon-chevron-right\"></span>\n                 </a>\n    </div>\n  `\n})\nexport class Carousel implements OnDestroy {\n    @Input() public noWrap:boolean;\n    @Input() public noPause:boolean;\n    @Input() public noTransition:boolean;\n\n    @Input() public get interval():number {\n        return this._interval;\n    }\n\n    public set interval(value:number) {\n        this._interval = value;\n        this.restartTimer();\n    }\n\n    private slides:Array<Slide> = [];\n    private currentInterval:any;\n    private isPlaying:boolean;\n    private destroyed:boolean = false;\n    private currentSlide:Slide;\n    private _interval:number;\n\n    public ngOnDestroy() {\n        this.destroyed = true;\n    }\n\n    public select(nextSlide:Slide, direction:Direction = Direction.UNKNOWN) {\n        let nextIndex = nextSlide.index;\n        if (direction === Direction.UNKNOWN) {\n            direction = nextIndex > this.getCurrentIndex() ? Direction.NEXT : Direction.PREV;\n        }\n\n        // Prevent this user-triggered transition from occurring if there is already one in progress\n        if (nextSlide && nextSlide !== this.currentSlide) {\n            this.goNext(nextSlide, direction);\n        }\n    }\n\n    private goNext(slide:Slide, direction:Direction) {\n        if (this.destroyed) {\n            return;\n        }\n\n        slide.direction = direction;\n        slide.active = true;\n\n        if (this.currentSlide) {\n            this.currentSlide.direction = direction;\n            this.currentSlide.active = false;\n        }\n\n        this.currentSlide = slide;\n\n        // every time you change slides, reset the timer\n        this.restartTimer();\n    }\n\n    private getSlideByIndex(index:number) {\n        let len = this.slides.length;\n        for (let i = 0; i < len; ++i) {\n            if (this.slides[i].index === index) {\n                return this.slides[i];\n            }\n        }\n    }\n\n    private getCurrentIndex() {\n        return !this.currentSlide ? 0 : this.currentSlide.index;\n    }\n\n    private next() {\n        let newIndex = (this.getCurrentIndex() + 1) % this.slides.length;\n\n        if (newIndex === 0 && this.noWrap) {\n            this.pause();\n            return;\n        }\n\n        return this.select(this.getSlideByIndex(newIndex), Direction.NEXT);\n    }\n\n    private prev() {\n        let newIndex = this.getCurrentIndex() - 1 < 0 ? this.slides.length - 1 : this.getCurrentIndex() - 1;\n\n        if (this.noWrap && newIndex === this.slides.length - 1) {\n            this.pause();\n            return;\n        }\n\n        return this.select(this.getSlideByIndex(newIndex), Direction.PREV);\n    }\n\n    private restartTimer() {\n        this.resetTimer();\n        let interval = +this.interval;\n        if (!isNaN(interval) && interval > 0) {\n            this.currentInterval = setInterval(() => {\n                let nInterval = +this.interval;\n                if (this.isPlaying && !isNaN(this.interval) && nInterval > 0 && this.slides.length) {\n                    this.next();\n                } else {\n                    this.pause();\n                }\n            }, interval);\n        }\n    }\n\n    private resetTimer() {\n        if (this.currentInterval) {\n            clearInterval(this.currentInterval);\n            this.currentInterval = null;\n        }\n    }\n\n    public play() {\n        if (!this.isPlaying) {\n            this.isPlaying = true;\n            this.restartTimer();\n        }\n    }\n\n    public pause() {\n        if (!this.noPause) {\n            this.isPlaying = false;\n            this.resetTimer();\n        }\n    }\n\n    public addSlide(slide:Slide) {\n        slide.index = this.slides.length;\n        this.slides.push(slide);\n        if (this.slides.length === 1 || slide.active) {\n            this.select(this.slides[this.slides.length - 1]);\n            if (this.slides.length === 1) {\n                this.play();\n            }\n        } else {\n            slide.active = false;\n        }\n    }\n    \n    public removeSlide(slide:Slide) {\n        this.slides.splice(slide.index, 1);\n    \n        if (this.slides.length === 0) {\n            this.currentSlide = null;\n            return;\n        }\n    \n        for (let i = 0; i < this.slides.length; i++) {\n            this.slides[i].index = i;\n        }\n    }\n}"],"sourceRoot":"/source/"}